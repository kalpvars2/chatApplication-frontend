[{"/Users/ts-priyansh.gaharana/Desktop/Kalp/chatApplication-frontend/src/index.js":"1","/Users/ts-priyansh.gaharana/Desktop/Kalp/chatApplication-frontend/src/App.js":"2","/Users/ts-priyansh.gaharana/Desktop/Kalp/chatApplication-frontend/src/reportWebVitals.js":"3","/Users/ts-priyansh.gaharana/Desktop/Kalp/chatApplication-frontend/src/components/Dashboard/Dashboard.js":"4","/Users/ts-priyansh.gaharana/Desktop/Kalp/chatApplication-frontend/src/components/Login/Login.js":"5","/Users/ts-priyansh.gaharana/Desktop/Kalp/chatApplication-frontend/src/components/SignUp/SignUp.js":"6","/Users/ts-priyansh.gaharana/Desktop/Kalp/chatApplication-frontend/src/components/ChatView/ChatView.js":"7","/Users/ts-priyansh.gaharana/Desktop/Kalp/chatApplication-frontend/src/components/ChatList/ChatList.js":"8","/Users/ts-priyansh.gaharana/Desktop/Kalp/chatApplication-frontend/src/components/NewChat/NewChat.js":"9","/Users/ts-priyansh.gaharana/Desktop/Kalp/chatApplication-frontend/src/components/ChatTextBox/ChatTextBox.js":"10"},{"size":952,"mtime":1611330677090,"results":"11","hashOfConfig":"12"},{"size":578,"mtime":1611330677074,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1611330677091,"results":"14","hashOfConfig":"12"},{"size":8204,"mtime":1611330677080,"results":"15","hashOfConfig":"12"},{"size":2888,"mtime":1611330677081,"results":"16","hashOfConfig":"12"},{"size":3668,"mtime":1611330677086,"results":"17","hashOfConfig":"12"},{"size":1667,"mtime":1611330677079,"results":"18","hashOfConfig":"12"},{"size":2722,"mtime":1611330677078,"results":"19","hashOfConfig":"12"},{"size":3848,"mtime":1611382083844,"results":"20","hashOfConfig":"12"},{"size":1055,"mtime":1611330677078,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"izr9ya",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"24"},"/Users/ts-priyansh.gaharana/Desktop/Kalp/chatApplication-frontend/src/index.js",[],["47","48"],"/Users/ts-priyansh.gaharana/Desktop/Kalp/chatApplication-frontend/src/App.js",[],"/Users/ts-priyansh.gaharana/Desktop/Kalp/chatApplication-frontend/src/reportWebVitals.js",[],"/Users/ts-priyansh.gaharana/Desktop/Kalp/chatApplication-frontend/src/components/Dashboard/Dashboard.js",["49","50","51","52"],"import React, {useState, useEffect, createContext} from 'react';\nimport ChatList from '../ChatList/ChatList';\nimport ChatView from '../ChatView/ChatView';\nimport NewChat from '../NewChat/NewChat';\nimport {ReactComponent as ChatLogo} from '../../assets/svg/chat.svg';\nimport './Dashboard.css';\nimport io from 'socket.io-client';\nexport const submitMessageContext = createContext();\nexport const messageReadContext = createContext();\nconst firebase = require('firebase');\n\nlet socket;\n\nconst Dashboard = (props) => {\n\tconst [selectedChat, setSelectedChat] = useState(null);\n\tconst [newChatFormVisible, setNewChatFormVisible] = useState(false);\n\tconst [email, setEmail] = useState('');\n\tconst [chats, setChats] = useState([]);\n\tconst [contactListVisible, setContactListVisible] = useState(true);\n\tconst ENDPOINT = 'localhost:8000';\n\n\tuseEffect(() => {\n\t\tconst token = localStorage.getItem('chatAppToken');\n\t\tif(!token)\n\t\t\tprops.history.push('/login');\n\t\telse{\n\t\t\tfetch(\"http://localhost:8000/dashboard\", {\n\t\t\t\tmethod: 'get',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type' : 'application/json',\n\t\t\t\t\t'Authorization' : \"Bearer \" + token\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.then(async (data) => {\n\t\t\t\tif(data.type === 'error' && data.value === \"Invalid Token.\"){\n\t\t\t\t\tlocalStorage.removeItem('chatAppToken');\n\t\t\t\t\tprops.history.push('/login');\n\t\t\t\t} else {\n\t\t\t\t\tsetChats(data.value.chats);\n\t\t\t\t\tsetEmail(data.value.email);\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\treturn async () => {\n\t\t\tawait setChats([]);\n\t\t\tawait setEmail('');\n\t\t\tawait setSelectedChat(null);\n\t\t\tawait setNewChatFormVisible(false);\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif(email){\n\t\t\tsocket = io(ENDPOINT);\n\t\t\tsocket.emit('join', {email: email});\n\t\t\tsocket.on('receiveUpdatedChats', ({updatedChats}) => setChats(updatedChats));\n\t\t}\n\t}, [email]);\n\n\tconst newChatBtnClicked = () => {\n\t\tsetNewChatFormVisible(true);\n\t\tsetContactListVisible(false);\n\t\tsetSelectedChat(null);\n\t\t// console.log(\"newChatButtonClicked\");\n\t};\n\n\tconst selectChat = (chatIndex) => {\n\t\t// console.log(\"Select chat called with index : \", chatIndex);\n\t\tsetNewChatFormVisible(false);\n\t\tsetContactListVisible(false);\n\t\tsetSelectedChat(chatIndex);\n\t\tmessageRead(chatIndex);\n\t};\n\n\t// useEffect(() => {\n\t// \tif(selectedChat !== null)\n\t// \t\tmessageRead();\n\t// }, [chats[selectedChat]]);\n\n\tconst buildDocKey = (friend) => {\n\t\treturn [email, friend].sort().join(':');\n\t}\n\t\n\tconst checkTextValid = (text) => {\n\t\treturn text.replace(/\\s/g, '');\n\t};\n\n\tconst submitMessage = (msg) => {\n\t\t// _ref = msgRef;\n\t\t// console.log(_ref.current);\n\t\t// const msg = msgRef.current === null ? msgRef : msgRef.current.value;\n\t\tif(checkTextValid(msg)){\n\t\t\tif(socket){\n\t\t\t\tconst messageObject = {\n\t\t\t\t\tmessage: msg,\n\t\t\t\t\tsender: email,\n\t\t\t\t\treceiver: chats[selectedChat].users.filter(user => user !== email)[0]\n\t\t\t\t};\n\t\t\t\tsocket.emit('submitMessage', {messageObject});\n\t\t\t}\n\t\t\t// firebase.default\n\t\t\t// \t.firestore()\n\t\t\t// \t.collection('chats')\n\t\t\t// \t.doc(docKey)\n\t\t\t// \t.update({\n\t\t\t// \t\tmessages: firebase.default.firestore.FieldValue.arrayUnion({\n\t\t\t// \t\t\tsender: email,\n\t\t\t// \t\t\tmessage: msg\n\t\t\t// \t\t}),\n\t\t\t// \t\treceiverHasRead: false,\n\t\t\t// \t\ttimestamp: Date.now()\n\t\t\t// \t})\n\t\t}\n\t\tconst chatTextInput = document.getElementById(\"chatTextInput\");\n\t\tif(chatTextInput !== null)\n\t\t\tchatTextInput.value = \"\";\n\t\t// if(_ref.current !== null)\n\t\t// \t_ref.current.value = \"\";\n\t}\n\n\tconst goToChat = (docKey, message) => {\n\t\tconst messageObject = {\n\t\t\tmessage: message,\n\t\t\tsender: email,\n\t\t\treceiver: docKey.split(':').filter(user => user !== email)[0]\n\t\t};\n\t\tsocket.emit('submitMessage', {messageObject});\n\t\tchats.filter((chat, index) => {\n\t\t\tif(chat.docKey === docKey)\n\t\t\t\tselectChat(index);\n\t\t});\n\t\t// const usersInChat = docKey.split(':');\n\t\t// const chat = chats.find(_chat => usersInChat.every(_user => _chat.users.includes(_user)));\n\t\t// await selectChat(chats.indexOf(chat));\n\t\t// setTimeout(console.log(selectedChat), 2000);\n\t\t// setTimeout(submitMessage(message), 1000);\n\t};\n\n\tuseEffect(() => {\n\t\tif(selectedChat !== null)\n\t\t\tselectChat(chats.length-1);\n\t}, [chats.length]);\n\n\tconst newChatSubmit = async (chatObj) => {\n\t\tconst chatObject = {\n\t\t\tdocKey: buildDocKey(chatObj.sendTo),\n\t\t\tusers: [email, chatObj.sendTo],\n\t\t\treceiverHasRead: false,\n\t\t\tmessages: [{\n\t\t\t\tmessage: chatObj.message,\n\t\t\t\tsender: email,\n\t\t\t\treceiver: chatObj.sendTo\n\t\t\t}]\n\t\t};\n\t\tif(socket){\n\t\t\tsocket.emit('newChat', {chatObject});\n\t\t};\n\t\t// const messageObject = \n\t\t// const docKey = buildDocKey(chatObj.sendTo);\n\t\t// await firebase.default\n\t\t// \t.firestore()\n\t\t// \t.collection('chats')\n\t\t// \t.doc(docKey)\n\t\t// \t.set({\n\t\t// \t\treceiverHasRead: false,\n\t\t// \t\ttimestamp: Date.now(),\n\t\t// \t\tusers: [email, chatObj.sendTo],\n\t\t// \t\tmessages: [{\n\t\t// \t\t\tmessage: chatObj.message,\n\t\t// \t\t\tsender: email\n\t\t// \t\t}]\n\t\t// \t})\n\t};\n\n\tconst clickedChatWhereNotSender = (chatIndex) => chats[chatIndex].messages[chats[chatIndex].messages.length - 1].sender !== email;\n\n\tconst messageRead = (chatIndex = selectedChat) => {\n\t\tif(clickedChatWhereNotSender(chatIndex)){\n\t\t\tconst docKey = buildDocKey(chats[chatIndex].users.filter(user => user !== email)[0]);\n\t\t\tif(socket){\n\t\t\t\tsocket.emit('messageRead', {docKey});\n\t\t\t}\n\t\t}\n\t}\n\n\n\t// useEffect(() => {\n\t// \tfirebase.default.auth().onAuthStateChanged(async _usr => {\n\t// \t\tif(!_usr)\n\t// \t\t\tprops.history.push('/login');\n\t// \t\telse{\n\t// \t\t\tawait firebase.default\n\t// \t\t\t\t.firestore()\n\t// \t\t\t\t.collection('chats')\n\t// \t\t\t\t.where('users', 'array-contains', _usr.email)\n\t// \t\t\t\t.onSnapshot(async result => {\n\t// \t\t\t\t\tconst chats = result.docs.map(_doc => _doc.data());\n\t// \t\t\t\t\tawait setEmail(_usr.email);\n\t// \t\t\t\t\tawait setChats(chats);\n\t// \t\t\t\t})\n\t// \t\t}\n\t// \t});\n\t// \treturn () => {\n\t// \t\tsetChats([]);\n\t// \t\tsetEmail('');\n\t// \t\tsetSelectedChat(null);\n\t// \t\tsetNewChatFormVisible(false);\n\t// \t}\n\t// }, []);\n\n\tif(window.innerWidth <= 650){\n\t\tif(contactListVisible){\n\t\t\treturn (\n\t\t\t    <div className=\"dashboard\">\n\t\t\t\t\t<div className=\"flex logoPart\">\n\t\t\t\t\t\t<ChatLogo className=\"logo\"/>\n\t\t\t\t\t\t<p className=\"f3 ml3 white\">Vartalaap</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex chatPart\">\n\t\t\t\t\t\t<ChatList history={props.history}\n\t\t\t\t\t\tselectChat={selectChat}\n\t\t\t\t\t\tsocket={socket}\n\t\t\t\t\t\tnewChatBtnClicked={newChatBtnClicked}\n\t\t\t\t\t\tuserEmail={email}\n\t\t\t\t\t\tsetContactListVisible={setContactListVisible}\n\t\t\t\t\t\tchats={chats}\n\t\t\t\t\t\tselectedChatIndex={selectedChat}/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div className=\"dashboard\">\n\t\t\t\t\t<div className=\"flex logoPart\">\n\t\t\t\t\t\t<ChatLogo className=\"logo\"/>\n\t\t\t\t\t\t<p className=\"f3 ml3 white\">Vartalaap</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex chatPart\">\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnewChatFormVisible ?\n\t\t\t\t\t\t\t\t<NewChat userEmail={email} socket={socket} goToChatFn={goToChat} newChatSubmitFn={newChatSubmit}/> :\n\t\t\t\t\t\t\t\t<submitMessageContext.Provider value = {submitMessage}>\n\t\t\t\t\t\t\t\t\t<messageReadContext.Provider value = {messageRead}>\n\t\t\t\t\t\t\t\t\t\t<ChatView id=\"chatViewContainer\" className=\"chatViewComponent\" setContactListVisible={setContactListVisible} user={email} chat={chats[selectedChat]} />\n\t\t\t\t\t\t\t\t\t</messageReadContext.Provider>\n\t\t\t\t\t\t\t\t</submitMessageContext.Provider>\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t} else {\n\t\treturn (\n\t\t\t<div className=\"dashboard\">\n\t\t\t\t<div className=\"flex logoPart\">\n\t\t\t\t\t<ChatLogo className=\"logo\"/>\n\t\t\t\t\t<p className=\"f3 ml3 white\">Vartalaap</p>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"flex chatPart\">\n\t\t\t\t\t<ChatList history={props.history}\n\t\t\t\t\tselectChat={selectChat}\n\t\t\t\t\tnewChatBtnClicked={newChatBtnClicked}\n\t\t\t\t\tuserEmail={email}\n\t\t\t\t\tsocket={socket}\n\t\t\t\t\tsetContactListVisible={setContactListVisible}\n\t\t\t\t\tchats={chats}\n\t\t\t\t\tselectedChatIndex={selectedChat}/>\n\t\t\t\t\t{\n\t\t\t\t\t\tnewChatFormVisible\n\t\t\t\t\t\t? <NewChat userEmail={email} socket={socket} goToChatFn={goToChat} newChatSubmitFn={newChatSubmit}/>\n\t\t\t\t\t\t: <submitMessageContext.Provider value = {submitMessage}>\n\t\t\t\t\t\t\t  <messageReadContext.Provider value = {messageRead}>\n\t\t\t\t\t\t\t  \t  <ChatView id=\"chatViewContainer\" className=\"chatViewComponent\" setContactListVisible={setContactListVisible} user={email} chat={chats[selectedChat]} />\n\t\t\t\t\t\t\t  </messageReadContext.Provider>\n\t\t\t\t\t\t  </submitMessageContext.Provider>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Dashboard;","/Users/ts-priyansh.gaharana/Desktop/Kalp/chatApplication-frontend/src/components/Login/Login.js",["53"],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport './Login.css';\n\nconst Login = (props) => {\n\tconst [formData, setFormData] = useState({\n\t\temail: '',\n\t\tpassword: ''\n\t});\n\n\tconst [signInError, setSignInError] = useState('');\n\n\tuseEffect(() => {\n\t\tconst token = localStorage.getItem('chatAppToken');\n\t\tif(token)\n\t\t\tprops.history.push('/');\n\t}, []);\n\n\tconst onSubmitSignIn = (event) => {\n\t\tevent.preventDefault();\n\t\tfetch(\"http://localhost:8000/login\", {\n\t\t\tmethod: 'post',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\temail: formData.email,\n\t\t\t\tpassword: formData.password\n\t\t\t})\n\t\t})\n\t\t.then(response => response.json())\n\t\t.then(data => {\n\t\t\tif(data.type === 'error')\n\t\t\t\tsetSignInError(data.value)\n\t\t\telse{\n\t\t\t\tsetSignInError('');\n\t\t\t\tlocalStorage.setItem('chatAppToken', data.value);\n\t\t\t\tprops.history.push('/');\n\t\t\t}\n\t\t})\n\t};\n\n\tconst onUserTyping = (type, event) => {\n\t\tswitch (type){\n\t\t\tcase 'email':\n\t\t\t\tsetFormData({...formData, email: event.target.value});\n\t\t\t\tbreak;\n\t\t\tcase 'password':\n\t\t\t\tsetFormData({...formData, password: event.target.value});\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t};\n\treturn (\n\t\t<article className=\"ba b--black-10 mv4  w-50-m w-25-l mw6 shadow-5 center\">\n\t\t\t<main className=\"pa4 black-80\">\n\t\t\t  <div className=\"measure\">\n\t\t\t    <fieldset id=\"sign_in\" className=\"ba b--transparent ph0 mh0\">\n\t\t\t      <legend className=\"f1 fw6 ph0 mh0\">Sign In</legend>\n\t\t\t      <div className=\"mt3\">\n\t\t\t        <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\n\t\t\t        <input required onChange={(event) => onUserTyping('email', event)} className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"email\" name=\"email-address\"  id=\"email-address\" />\n\t\t\t      </div>\n\t\t\t      <div className=\"mv3\">\n\t\t\t        <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\n\t\t\t        <input required onChange={(event) => onUserTyping('password', event)} className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"password\"  id=\"password\" />\n\t\t\t      </div>\n\t\t\t    </fieldset>\n\t\t\t    <div style={{textAlign: 'center'}}>\n\t\t\t      <input onClick={(event) => onSubmitSignIn(event)} className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" type=\"submit\" value=\"Sign In\" />\n\t\t\t    </div>\n\t\t\t    {\n\t\t\t    \tsignInError \n\t\t\t    \t? <div><h5 className=\"error\">{signInError}</h5></div>\n\t\t\t    \t: null\n\t\t\t    }\n\t\t\t    <div style={{textAlign: \"center\", marginTop: '10px'}}>\n\t\t\t\t    <h5>Don't have an account?</h5>\n\t\t\t\t    <Link to=\"/signup\" style={{textDecoration: \"none\", color: \"black\"}} className=\"b ph1 pv1 input-reset ba b--black bg-transparent grow pointer f6 dib\">Sign Up Instead</Link>\n\t\t\t\t</div>\n\t\t\t  </div>\n\t\t\t</main>\n\t\t</article>\n\t);\n}\n\nexport default Login;\n","/Users/ts-priyansh.gaharana/Desktop/Kalp/chatApplication-frontend/src/components/SignUp/SignUp.js",["54"],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport './SignUp.css';\n\nconst SignUp = (props) => {\n\n\tconst [formData, setFormData] = useState({\n\t\temail: '',\n\t\tpassword: '',\n\t\tpasswordConfirmation: ''\n\t});\n\n\tconst [signUpError, setSignUpError] = useState('');\n\n\tuseEffect(() => {\n\t\tconst token = localStorage.getItem('chatAppToken');\n\t\tif(token)\n\t\t\tprops.history.push('/');\n\t}, []);\n\n\tconst isFormValid = () => formData.password === formData.passwordConfirmation;\n\n\tconst onSubmitSignUp = (event) => {\n\t\tevent.preventDefault();\n\t\tif(!isFormValid()){\n\t\t\tsetSignUpError('Passwords do not match. Try again!');\n\t\t\treturn;\n\t\t}\n\t\tfetch(\"http://localhost:8000/register\", {\n\t\t\tmethod: 'post',\n\t\t\theaders: {'Content-Type':'application/json'},\n\t\t\tbody: JSON.stringify({\n\t\t\t\temail: formData.email,\n\t\t\t\tpassword: formData.password\n\t\t\t})\n\t\t})\n\t\t.then(response => response.json())\n\t\t.then(data => {\n\t\t\tif(data.type === \"error\")\n\t\t\t\tsetSignUpError(data.value);\n\t\t\telse{\n\t\t\t\tsetSignUpError('');\n\t\t\t\tlocalStorage.setItem('chatAppToken', data.value);\n\t\t\t\tprops.history.push('/')\n\t\t\t}\n\t\t})\n\t\t.catch(err => setSignUpError(err))\n\t};\n\n\tconst onUserTyping = (type, event) => {\n\t\tswitch (type){\n\t\t\tcase 'email':\n\t\t\t\tsetFormData({...formData, email: event.target.value});\n\t\t\t\tbreak;\n\t\t\tcase 'password':\n\t\t\t\tsetFormData({...formData, password: event.target.value});\n\t\t\t\tbreak;\n\t\t\tcase 'passwordConfirmation':\n\t\t\t\tsetFormData({...formData, passwordConfirmation: event.target.value})\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log(formData.email);\n\t\t}\n\t};\n\t\n\treturn (\n\t\t<article className=\"ba b--black-10 mv4\n\t\t w-50-m w-25-l mw6 shadow-5 center\">\n\t\t\t<main className=\"pa4 black-80\">\n\t\t\t  <div className=\"measure\">\n\t\t\t    <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\n\t\t\t      <legend className=\"f1 fw6 ph0 mh0\">Register</legend>\n\t\t\t      <div className=\"mt3\">\n\t\t\t        <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\n\t\t\t        <input required onChange={(event) => onUserTyping('email', event)} className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"email\" name=\"email-address\"  id=\"email-address\" />\n\t\t\t      </div>\n\t\t\t      <div className=\"mv3\">\n\t\t\t        <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\n\t\t\t        <input required onChange={(event) => onUserTyping('password', event)} className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"password\"  id=\"password\" />\n\t\t\t      </div>\n\t\t\t      <div className=\"mv3\">\n\t\t\t        <label className=\"db fw6 lh-copy f6\" htmlFor=\"passwordConfirmation\">Confirm Password</label>\n\t\t\t        <input required onChange={(event) => onUserTyping('passwordConfirmation', event)} className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"passwordConfirmation\"  id=\"passwordConfirmation\" />\n\t\t\t      </div>\n\t\t\t    </fieldset>\n\t\t\t    <div style={{textAlign: 'center'}}>\n\t\t\t      <input onClick={(event) => onSubmitSignUp(event)} className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" type=\"submit\" value=\"Sign Up\" />\n\t\t\t    </div>\n\t\t\t    {\n\t\t\t    \tsignUpError \n\t\t\t    \t? <div><h5 className=\"error\">{signUpError}</h5></div>\n\t\t\t    \t: null\n\t\t\t    }\n\t\t\t    <div style={{textAlign: \"center\", marginTop: '10px'}}>\n\t\t\t\t    <h5>Already have an account?</h5>\n\t\t\t\t    <Link to=\"/login\" style={{textDecoration: \"none\", color: \"black\"}} className=\"b ph1 pv1 input-reset ba b--black bg-transparent grow pointer f6 dib\">Sign In Instead</Link>\n\t\t\t\t</div>\n\t\t\t  </div>\n\t\t\t</main>\n\t\t</article>\n\t);\n}\n\nexport default SignUp;\n","/Users/ts-priyansh.gaharana/Desktop/Kalp/chatApplication-frontend/src/components/ChatView/ChatView.js",[],"/Users/ts-priyansh.gaharana/Desktop/Kalp/chatApplication-frontend/src/components/ChatList/ChatList.js",[],"/Users/ts-priyansh.gaharana/Desktop/Kalp/chatApplication-frontend/src/components/NewChat/NewChat.js",["55","56","57","58"],"/Users/ts-priyansh.gaharana/Desktop/Kalp/chatApplication-frontend/src/components/ChatTextBox/ChatTextBox.js",["59"],"import React, {useState, useRef, useContext} from 'react';\nimport {ReactComponent as SendMessageSVG} from '../../assets/svg/sendMessage.svg';\nimport {submitMessageContext, messageReadContext} from '../Dashboard/Dashboard';\nimport './ChatTextBox.css';\n\nconst ChatTextBox = () => {\n\tconst [chatText, setChatText] = useState('');\n\tconst chatRef = useRef();\n\tconst submitMessage = useContext(submitMessageContext);\n\tconst messageRead = useContext(messageReadContext);\n\tconst onUserTyping = (event) => {\n\t\t(event.keyCode === 13) ? submitMessage(chatRef.current.value) : setChatText(event.target.value);\n\t};\n\n\tconst userClickedInput = () => messageRead();\n\n\treturn (\n\t\t<div className=\"chatInput\">\n\t\t\t<input ref={chatRef} required onFocus={userClickedInput} onKeyUp={(event) => onUserTyping(event)} className=\"pa2 br4 input-reset ba bg-transparent w-100\" id=\"chatTextInput\" placeholder=\"Enter message...\"/>\n\t\t\t<SendMessageSVG onClick={() => submitMessage(chatRef.current.value)} className=\"pointer grow sendMessage\" />\n\t\t</div>\n\t);\n}\n\nexport default ChatTextBox;",{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":10,"column":7,"nodeType":"66","messageId":"67","endLine":10,"endColumn":15},{"ruleId":"68","severity":1,"message":"69","line":51,"column":5,"nodeType":"70","endLine":51,"endColumn":7,"suggestions":"71"},{"ruleId":"72","severity":1,"message":"73","line":129,"column":30,"nodeType":"74","messageId":"75","endLine":129,"endColumn":32},{"ruleId":"68","severity":1,"message":"76","line":143,"column":5,"nodeType":"70","endLine":143,"endColumn":19,"suggestions":"77"},{"ruleId":"68","severity":1,"message":"69","line":17,"column":5,"nodeType":"70","endLine":17,"endColumn":7,"suggestions":"78"},{"ruleId":"68","severity":1,"message":"69","line":19,"column":5,"nodeType":"70","endLine":19,"endColumn":7,"suggestions":"79"},{"ruleId":"64","severity":1,"message":"80","line":1,"column":34,"nodeType":"66","messageId":"67","endLine":1,"endColumn":43},{"ruleId":"64","severity":1,"message":"65","line":3,"column":7,"nodeType":"66","messageId":"67","endLine":3,"endColumn":15},{"ruleId":"64","severity":1,"message":"81","line":9,"column":12,"nodeType":"66","messageId":"67","endLine":9,"endColumn":27},{"ruleId":"64","severity":1,"message":"82","line":10,"column":12,"nodeType":"66","messageId":"67","endLine":10,"endColumn":27},{"ruleId":"64","severity":1,"message":"83","line":7,"column":9,"nodeType":"66","messageId":"67","endLine":7,"endColumn":17},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'firebase' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.","ArrayExpression",["86"],"array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'selectChat' and 'selectedChat'. Either include them or remove the dependency array.",["87"],["88"],["89"],"'useEffect' is defined but never used.","'checkUserExists' is assigned a value but never used.","'checkChatExists' is assigned a value but never used.","'chatText' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"90","fix":"91"},{"desc":"92","fix":"93"},{"desc":"90","fix":"94"},{"desc":"90","fix":"95"},"Update the dependencies array to be: [props.history]",{"range":"96","text":"97"},"Update the dependencies array to be: [chats.length, selectChat, selectedChat]",{"range":"98","text":"99"},{"range":"100","text":"97"},{"range":"101","text":"97"},[1587,1589],"[props.history]",[4046,4060],"[chats.length, selectChat, selectedChat]",[392,394],[423,425]]