[{"/home/kalp/Desktop/WebD/My/Chat-App/client/src/index.js":"1","/home/kalp/Desktop/WebD/My/Chat-App/client/src/reportWebVitals.js":"2","/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/SignUp/SignUp.js":"3","/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/Dashboard/Dashboard.js":"4","/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/Login/Login.js":"5","/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/ChatList/ChatList.js":"6","/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/ChatView/ChatView.js":"7","/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/ChatTextBox/ChatTextBox.js":"8","/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/NewChat/NewChat.js":"9","/home/kalp/Desktop/WebD/My/Chat-App/client/src/App.js":"10","/home/kalp/Desktop/WebD/My/Chat-App/client/src/services/config.js":"11"},{"size":519,"mtime":1611388590147,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1609243000250,"results":"14","hashOfConfig":"13"},{"size":3705,"mtime":1611390950381,"results":"15","hashOfConfig":"13"},{"size":6769,"mtime":1611396177595,"results":"16","hashOfConfig":"13"},{"size":2925,"mtime":1611382414969,"results":"17","hashOfConfig":"13"},{"size":2722,"mtime":1611328117347,"results":"18","hashOfConfig":"13"},{"size":1667,"mtime":1611307922066,"results":"19","hashOfConfig":"13"},{"size":980,"mtime":1611391191886,"results":"20","hashOfConfig":"13"},{"size":3156,"mtime":1611393953417,"results":"21","hashOfConfig":"13"},{"size":578,"mtime":1611234203386,"results":"22","hashOfConfig":"13"},{"size":150,"mtime":1611398986664,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"873m4w",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/home/kalp/Desktop/WebD/My/Chat-App/client/src/index.js",[],["51","52"],"/home/kalp/Desktop/WebD/My/Chat-App/client/src/reportWebVitals.js",[],"/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/SignUp/SignUp.js",["53"],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport {apiURL} from '../../services/config.js';\nimport './SignUp.css';\n\nconst SignUp = (props) => {\n\n\tconst [formData, setFormData] = useState({\n\t\temail: '',\n\t\tpassword: '',\n\t\tpasswordConfirmation: ''\n\t});\n\n\tconst [signUpError, setSignUpError] = useState('');\n\n\tuseEffect(() => {\n\t\tconst token = localStorage.getItem('chatAppToken');\n\t\tif(token)\n\t\t\tprops.history.push('/');\n\t}, []);\n\n\tconst isFormValid = () => formData.password === formData.passwordConfirmation;\n\n\tconst onSubmitSignUp = (event) => {\n\t\tevent.preventDefault();\n\t\tif(!isFormValid()){\n\t\t\tsetSignUpError('Passwords do not match. Try again!');\n\t\t\treturn;\n\t\t}\n\t\tfetch(`${apiURL}/register`, {\n\t\t\tmethod: 'post',\n\t\t\theaders: {'Content-Type':'application/json'},\n\t\t\tbody: JSON.stringify({\n\t\t\t\temail: formData.email,\n\t\t\t\tpassword: formData.password\n\t\t\t})\n\t\t})\n\t\t.then(response => response.json())\n\t\t.then(data => {\n\t\t\tif(data.type === \"error\")\n\t\t\t\tsetSignUpError(data.value);\n\t\t\telse{\n\t\t\t\tsetSignUpError('');\n\t\t\t\tlocalStorage.setItem('chatAppToken', data.value);\n\t\t\t\tprops.history.push('/')\n\t\t\t}\n\t\t})\n\t\t.catch(err => setSignUpError(err))\n\t};\n\n\tconst onUserTyping = (type, event) => {\n\t\tswitch (type){\n\t\t\tcase 'email':\n\t\t\t\tsetFormData({...formData, email: event.target.value});\n\t\t\t\tbreak;\n\t\t\tcase 'password':\n\t\t\t\tsetFormData({...formData, password: event.target.value});\n\t\t\t\tbreak;\n\t\t\tcase 'passwordConfirmation':\n\t\t\t\tsetFormData({...formData, passwordConfirmation: event.target.value})\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log(formData.email);\n\t\t}\n\t};\n\t\n\treturn (\n\t\t<article className=\"ba b--black-10 mv4\n\t\t w-50-m w-25-l mw6 shadow-5 center\">\n\t\t\t<main className=\"pa4 black-80\">\n\t\t\t  <div className=\"measure\">\n\t\t\t    <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\n\t\t\t      <legend className=\"f1 fw6 ph0 mh0\">Register</legend>\n\t\t\t      <div className=\"mt3\">\n\t\t\t        <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\n\t\t\t        <input required onChange={(event) => onUserTyping('email', event)} className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"email\" name=\"email-address\"  id=\"email-address\" />\n\t\t\t      </div>\n\t\t\t      <div className=\"mv3\">\n\t\t\t        <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\n\t\t\t        <input required onChange={(event) => onUserTyping('password', event)} className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"password\"  id=\"password\" />\n\t\t\t      </div>\n\t\t\t      <div className=\"mv3\">\n\t\t\t        <label className=\"db fw6 lh-copy f6\" htmlFor=\"passwordConfirmation\">Confirm Password</label>\n\t\t\t        <input required onChange={(event) => onUserTyping('passwordConfirmation', event)} className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"passwordConfirmation\"  id=\"passwordConfirmation\" />\n\t\t\t      </div>\n\t\t\t    </fieldset>\n\t\t\t    <div style={{textAlign: 'center'}}>\n\t\t\t      <input onClick={(event) => onSubmitSignUp(event)} className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" type=\"submit\" value=\"Sign Up\" />\n\t\t\t    </div>\n\t\t\t    {\n\t\t\t    \tsignUpError \n\t\t\t    \t? <div><h5 className=\"error\">{signUpError}</h5></div>\n\t\t\t    \t: null\n\t\t\t    }\n\t\t\t    <div style={{textAlign: \"center\", marginTop: '10px'}}>\n\t\t\t\t    <h5>Already have an account?</h5>\n\t\t\t\t    <Link to=\"/login\" style={{textDecoration: \"none\", color: \"black\"}} className=\"b ph1 pv1 input-reset ba b--black bg-transparent grow pointer f6 dib\">Sign In Instead</Link>\n\t\t\t\t</div>\n\t\t\t  </div>\n\t\t\t</main>\n\t\t</article>\n\t);\n}\n\nexport default SignUp;\n","/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/Dashboard/Dashboard.js",["54","55","56","57"],"import React, {useState, useEffect, createContext} from 'react';\nimport ChatList from '../ChatList/ChatList';\nimport ChatView from '../ChatView/ChatView';\nimport NewChat from '../NewChat/NewChat';\nimport {ReactComponent as ChatLogo} from '../../assets/svg/chat.svg';\nimport './Dashboard.css';\nimport io from 'socket.io-client';\nimport {apiURL} from '../../services/config.js';\nexport const submitMessageContext = createContext();\nexport const messageReadContext = createContext();\n\nlet socket;\n\nconst Dashboard = (props) => {\n\tconst [selectedChat, setSelectedChat] = useState(null);\n\tconst [newChatFormVisible, setNewChatFormVisible] = useState(false);\n\tconst [email, setEmail] = useState('');\n\tconst [chats, setChats] = useState([]);\n\tconst [contactListVisible, setContactListVisible] = useState(true);\n\tconst ENDPOINT = apiURL;\n\n\tuseEffect(() => {\n\t\tconst token = localStorage.getItem('chatAppToken');\n\t\tif(!token)\n\t\t\tprops.history.push('/login');\n\t\telse{\n\t\t\tfetch(`${apiURL}/dashboard`, {\n\t\t\t\tmethod: 'get',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type' : 'application/json',\n\t\t\t\t\t'Authorization' : \"Bearer \" + token\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.then(async (data) => {\n\t\t\t\tif(data.type === 'error' && data.value === \"Invalid Token.\"){\n\t\t\t\t\tlocalStorage.removeItem('chatAppToken');\n\t\t\t\t\tprops.history.push('/login');\n\t\t\t\t} else {\n\t\t\t\t\tsetChats(data.value.chats);\n\t\t\t\t\tsetEmail(data.value.email);\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\treturn async () => {\n\t\t\tawait setChats([]);\n\t\t\tawait setEmail('');\n\t\t\tawait setSelectedChat(null);\n\t\t\tawait setNewChatFormVisible(false);\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif(email){\n\t\t\tsocket = io(ENDPOINT);\n\t\t\tsocket.emit('join', {email: email});\n\t\t\tsocket.on('receiveUpdatedChats', ({updatedChats}) => setChats(updatedChats));\n\t\t}\n\t}, [email, ENDPOINT]);\n\n\tconst newChatBtnClicked = () => {\n\t\tsetNewChatFormVisible(true);\n\t\tsetContactListVisible(false);\n\t\tsetSelectedChat(null);\n\t};\n\n\tconst selectChat = (chatIndex) => {\n\t\tsetNewChatFormVisible(false);\n\t\tsetContactListVisible(false);\n\t\tsetSelectedChat(chatIndex);\n\t\tmessageRead(chatIndex);\n\t};\n\n\tconst buildDocKey = (friend) => {\n\t\treturn [email, friend].sort().join(':');\n\t}\n\t\n\tconst checkTextValid = (text) => {\n\t\treturn text.replace(/\\s/g, '');\n\t};\n\n\tconst submitMessage = (msg) => {\n\t\tif(checkTextValid(msg)){\n\t\t\tif(socket){\n\t\t\t\tconst receiverMail = chats[selectedChat].users.filter(user => user !== email)[0];\n\t\t\t\tconst messageObject = {\n\t\t\t\t\tmessage: msg,\n\t\t\t\t\tsender: email,\n\t\t\t\t\treceiver: receiverMail\n\t\t\t\t};\n\t\t\t\tconst chatObject = {\n\t\t\t\t\tdocKey: [email, receiverMail].sort().join(\":\"),\n\t\t\t\t\treceiverHasRead: false,\n\t\t\t\t\tmessages: [messageObject],\n\t\t\t\t\tusers: [email, receiverMail]\n\t\t\t\t}\n\t\t\t\tsocket.emit('submitMessage', {chatObject});\n\t\t\t}\n\t\t}\n\t\tconst chatTextInput = document.getElementById(\"chatTextInput\");\n\t\tif(chatTextInput !== null)\n\t\t\tchatTextInput.value = \"\";\n\t};\n\n\tconst goToChat = (docKey, message) => {\n\t\tconst chat = chats.filter(chat => chat.docKey === docKey)[0];\n\t\tconst receiverMail = docKey.split(':').filter(user => user !== email)[0];\n\t\tconst messageObject = {\n\t\t\tmessage: message,\n\t\t\tsender: email,\n\t\t\treceiver: docKey.split(':').filter(user => user !== email)[0]\n\t\t};\n\t\tconst chatObject = {\n\t\t\tdocKey: [email, receiverMail].sort().join(\":\"),\n\t\t\treceiverHasRead: false,\n\t\t\tmessages: [messageObject],\n\t\t\tusers: [email, receiverMail]\n\t\t};\n\t\tsocket.emit('submitMessage', {chatObject});\n\t\tchats.filter((chat, index) => {\n\t\t\tif(chat.docKey === docKey)\n\t\t\t\tselectChat(index);\n\t\t});\n\t};\n\n\tuseEffect(() => {\n\t\tif(selectedChat === null)\n\t\t\tselectChat(chats.length-1);\n\t}, [chats.length]);\n\n\tconst newChatSubmit = (chatObj) => {\n\t\tconst chatObject = {\n\t\t\tdocKey: buildDocKey(chatObj.sendTo),\n\t\t\tusers: [email, chatObj.sendTo],\n\t\t\treceiverHasRead: false,\n\t\t\tmessages: [{\n\t\t\t\tmessage: chatObj.message,\n\t\t\t\tsender: email,\n\t\t\t\treceiver: chatObj.sendTo\n\t\t\t}]\n\t\t};\n\t\tif(socket){\n\t\t\tsocket.emit('submitMessage', {chatObject});\n\t\t};\n\t};\n\n\tconst clickedChatWhereNotSender = (chatIndex) => chats[chatIndex].messages[chats[chatIndex].messages.length - 1].sender !== email;\n\n\tconst messageRead = (chatIndex = selectedChat) => {\n\t\tif(selectedChat === null)\n\t\t\treturn;\n\t\tif(clickedChatWhereNotSender(chatIndex)){\n\t\t\tconst docKey = buildDocKey(chats[chatIndex].users.filter(user => user !== email)[0]);\n\t\t\tif(socket){\n\t\t\t\tsocket.emit('messageRead', {docKey});\n\t\t\t}\n\t\t}\n\t}\n\n\tif(window.innerWidth <= 650){\n\t\tif(contactListVisible){\n\t\t\treturn (\n\t\t\t    <div className=\"dashboard\">\n\t\t\t\t\t<div className=\"flex logoPart\">\n\t\t\t\t\t\t<ChatLogo className=\"logo\"/>\n\t\t\t\t\t\t<p className=\"f3 ml3 white\">Vartalaap</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex chatPart\">\n\t\t\t\t\t\t<ChatList history={props.history}\n\t\t\t\t\t\tselectChat={selectChat}\n\t\t\t\t\t\tsocket={socket}\n\t\t\t\t\t\tnewChatBtnClicked={newChatBtnClicked}\n\t\t\t\t\t\tuserEmail={email}\n\t\t\t\t\t\tsetContactListVisible={setContactListVisible}\n\t\t\t\t\t\tchats={chats}\n\t\t\t\t\t\tselectedChatIndex={selectedChat}/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div className=\"dashboard\">\n\t\t\t\t\t<div className=\"flex logoPart\">\n\t\t\t\t\t\t<ChatLogo className=\"logo\"/>\n\t\t\t\t\t\t<p className=\"f3 ml3 white\">Vartalaap</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex chatPart\">\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnewChatFormVisible ?\n\t\t\t\t\t\t\t\t<NewChat userEmail={email} socket={socket} goToChatFn={goToChat} newChatSubmitFn={newChatSubmit}/> :\n\t\t\t\t\t\t\t\t<submitMessageContext.Provider value = {submitMessage}>\n\t\t\t\t\t\t\t\t\t<messageReadContext.Provider value = {messageRead}>\n\t\t\t\t\t\t\t\t\t\t<ChatView id=\"chatViewContainer\" className=\"chatViewComponent\" setContactListVisible={setContactListVisible} user={email} chat={chats[selectedChat]} />\n\t\t\t\t\t\t\t\t\t</messageReadContext.Provider>\n\t\t\t\t\t\t\t\t</submitMessageContext.Provider>\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t} else {\n\t\treturn (\n\t\t\t<div className=\"dashboard\">\n\t\t\t\t<div className=\"flex logoPart\">\n\t\t\t\t\t<ChatLogo className=\"logo\"/>\n\t\t\t\t\t<p className=\"f3 ml3 white\">Vartalaap</p>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"flex chatPart\">\n\t\t\t\t\t<ChatList history={props.history}\n\t\t\t\t\tselectChat={selectChat}\n\t\t\t\t\tnewChatBtnClicked={newChatBtnClicked}\n\t\t\t\t\tuserEmail={email}\n\t\t\t\t\tsocket={socket}\n\t\t\t\t\tsetContactListVisible={setContactListVisible}\n\t\t\t\t\tchats={chats}\n\t\t\t\t\tselectedChatIndex={selectedChat}/>\n\t\t\t\t\t{\n\t\t\t\t\t\tnewChatFormVisible\n\t\t\t\t\t\t? <NewChat userEmail={email} socket={socket} goToChatFn={goToChat} newChatSubmitFn={newChatSubmit}/>\n\t\t\t\t\t\t: <submitMessageContext.Provider value = {submitMessage}>\n\t\t\t\t\t\t\t  <messageReadContext.Provider value = {messageRead}>\n\t\t\t\t\t\t\t  \t  <ChatView id=\"chatViewContainer\" className=\"chatViewComponent\" setContactListVisible={setContactListVisible} user={email} chat={chats[selectedChat]} />\n\t\t\t\t\t\t\t  </messageReadContext.Provider>\n\t\t\t\t\t\t  </submitMessageContext.Provider>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Dashboard;","/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/Login/Login.js",["58"],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport {apiURL} from '../../services/config.js';\nimport './Login.css';\n\nconst Login = (props) => {\n\tconst [formData, setFormData] = useState({\n\t\temail: '',\n\t\tpassword: ''\n\t});\n\n\tconst [signInError, setSignInError] = useState('');\n\n\tuseEffect(() => {\n\t\tconst token = localStorage.getItem('chatAppToken');\n\t\tif(token)\n\t\t\tprops.history.push('/');\n\t}, []);\n\n\tconst onSubmitSignIn = (event) => {\n\t\tevent.preventDefault();\n\t\tfetch(`${apiURL}/login`, {\n\t\t\tmethod: 'post',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\temail: formData.email,\n\t\t\t\tpassword: formData.password\n\t\t\t})\n\t\t})\n\t\t.then(response => response.json())\n\t\t.then(data => {\n\t\t\tif(data.type === 'error')\n\t\t\t\tsetSignInError(data.value)\n\t\t\telse{\n\t\t\t\tsetSignInError('');\n\t\t\t\tlocalStorage.setItem('chatAppToken', data.value);\n\t\t\t\tprops.history.push('/');\n\t\t\t}\n\t\t})\n\t};\n\n\tconst onUserTyping = (type, event) => {\n\t\tswitch (type){\n\t\t\tcase 'email':\n\t\t\t\tsetFormData({...formData, email: event.target.value});\n\t\t\t\tbreak;\n\t\t\tcase 'password':\n\t\t\t\tsetFormData({...formData, password: event.target.value});\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t};\n\treturn (\n\t\t<article className=\"ba b--black-10 mv4  w-50-m w-25-l mw6 shadow-5 center\">\n\t\t\t<main className=\"pa4 black-80\">\n\t\t\t  <div className=\"measure\">\n\t\t\t    <fieldset id=\"sign_in\" className=\"ba b--transparent ph0 mh0\">\n\t\t\t      <legend className=\"f1 fw6 ph0 mh0\">Sign In</legend>\n\t\t\t      <div className=\"mt3\">\n\t\t\t        <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\n\t\t\t        <input required onChange={(event) => onUserTyping('email', event)} className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"email\" name=\"email-address\"  id=\"email-address\" />\n\t\t\t      </div>\n\t\t\t      <div className=\"mv3\">\n\t\t\t        <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\n\t\t\t        <input required onChange={(event) => onUserTyping('password', event)} className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"password\"  id=\"password\" />\n\t\t\t      </div>\n\t\t\t    </fieldset>\n\t\t\t    <div style={{textAlign: 'center'}}>\n\t\t\t      <input onClick={(event) => onSubmitSignIn(event)} className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" type=\"submit\" value=\"Sign In\" />\n\t\t\t    </div>\n\t\t\t    {\n\t\t\t    \tsignInError \n\t\t\t    \t? <div><h5 className=\"error\">{signInError}</h5></div>\n\t\t\t    \t: null\n\t\t\t    }\n\t\t\t    <div style={{textAlign: \"center\", marginTop: '10px'}}>\n\t\t\t\t    <h5>Don't have an account?</h5>\n\t\t\t\t    <Link to=\"/signup\" style={{textDecoration: \"none\", color: \"black\"}} className=\"b ph1 pv1 input-reset ba b--black bg-transparent grow pointer f6 dib\">Sign Up Instead</Link>\n\t\t\t\t</div>\n\t\t\t  </div>\n\t\t\t</main>\n\t\t</article>\n\t);\n}\n\nexport default Login;\n","/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/ChatList/ChatList.js",[],"/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/ChatView/ChatView.js",[],"/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/ChatTextBox/ChatTextBox.js",[],"/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/NewChat/NewChat.js",["59"],"import React, {useState, useRef, useEffect} from 'react';\nimport './NewChat.css';\n\nconst NewChat = ({userEmail, socket, newChatSubmitFn, goToChatFn}) => { \n\tconst [friendMail, setFriendMail] = useState('');\n\tconst [message, setMessage] = useState('');\n    const [newChatError, setNewChatError] = useState('');\n    // const [checkUserExists, setCheckUserExists] = useState()\n    // const [checkChatExists, setCheckChatExists]  = useState()\n\tconst messageRef = useRef();\n\n\tconst onUserTyping = (type, event) => {\n\t\tswitch(type){\n\t\t\tcase 'email':\n\t\t\t\tsetFriendMail(event.target.value);\n\t\t\t\tbreak;\n\t\t\tcase 'message':\n\t\t\t\tsetMessage(event.target.value);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t}\n\n\tconst buildDocKey = () => {\n\t\treturn [userEmail, friendMail].sort().join(':');\n\t}\n\n\tconst chatExists = async () => {\n\t\treturn new Promise((resolve, reject)=>{\n\t\t\tconst docKey = buildDocKey();\n\t\t\tsocket.emit('checkChatExists', {docKey: docKey}, ({result}) => {\n\t\t\t\t// setCheckChatExists(result)\n\t\t\t\tresolve(result);\n\t\t\t});\n\t\t})\n\t};\n\n\tconst userExists = () => {\n\t\treturn new Promise((resolve, reject)=>{\n\t\t\tsocket.emit('checkUserExists', {email: friendMail}, ({result}) => {\n\t\t\t\t// setCheckUserExists(result)\n\t\t\t\tresolve(result)\n\t\t\t});\n\t\t})\n\t}\n\n\tconst onSubmitNewChat = async (event) => {\n\t\tevent.preventDefault();\n\t\tif(userEmail === friendMail)\n\t\t\treturn setNewChatError('Cannot create chat to self.');\n        const friendAlreadyExists = await userExists();\n\t\tif(friendAlreadyExists){\n\t\t\tif(message.length){\n\t\t\t\tconst chatAlreadyExists = await chatExists();\n\t\t\t\tif(chatAlreadyExists) \n\t\t\t\t\tgoToChatFn(buildDocKey(), message);\n\t\t\t\telse \n\t\t\t\t\tnewChatSubmitFn({ sendTo: friendMail, message: messageRef.current.value});\n\t\t\t} else \n\t\t\t\tsetNewChatError('Message field cannot be empty.');\n\t\t} else {\n\t\t\tsetNewChatError(`Entered e-mail doesn't exist.`);\n\t\t}\n\t}\n\n\treturn (\n\t\t<article className=\"ba chatList b--black-10 shadow-5\">\n\t\t\t<main className=\"pa4 black-80\">\n\t\t\t  <div className=\"measure\">\n\t\t\t\t  <fieldset id=\"sign_in\" className=\"ba b--transparent ph0 mh0\">\n\t\t\t      <div className=\"mt3\">\n\t\t\t        <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Friend's E-mail</label>\n\t\t\t        <input required onChange={(event) => onUserTyping('email', event)} className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"email\" name=\"email-address\"  id=\"email-address\" />\n\t\t\t      </div>\n\t\t\t      <div className=\"mv3\">\n\t\t\t        <label className=\"db fw6 lh-copy f6\" htmlFor=\"message\">Message</label>\n\t\t\t        <input required ref={messageRef} onChange={(event) => onUserTyping('message', event)} className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"text\" name=\"message\"  id=\"message\" />\n\t\t\t      </div>\n\t\t\t    </fieldset>\n\t\t\t    <div className=\"flex\">\n\t\t\t\t    <span className=\"center red\">{newChatError}</span>\n\t\t\t    </div>\n\t\t\t    <div className=\"flex submitNewChatDiv\">\n\t\t\t      <input onClick={(event) => onSubmitNewChat(event)} className=\"b ph3 pv2 button br4 input-reset ba grow pointer f6 dib\" type=\"button\" value=\"Create Chat\" />\n\t\t\t    </div>\n\t\t\t  </div>\n\t\t\t</main>\n\t\t</article>\n\t);\n}\n\nexport default NewChat;","/home/kalp/Desktop/WebD/My/Chat-App/client/src/App.js",[],"/home/kalp/Desktop/WebD/My/Chat-App/client/src/services/config.js",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":20,"column":5,"nodeType":"66","endLine":20,"endColumn":7,"suggestions":"67"},{"ruleId":"64","severity":1,"message":"65","line":51,"column":5,"nodeType":"66","endLine":51,"endColumn":7,"suggestions":"68"},{"ruleId":"69","severity":1,"message":"70","line":106,"column":9,"nodeType":"71","messageId":"72","endLine":106,"endColumn":13},{"ruleId":"73","severity":1,"message":"74","line":120,"column":30,"nodeType":"75","messageId":"76","endLine":120,"endColumn":32},{"ruleId":"64","severity":1,"message":"77","line":129,"column":5,"nodeType":"66","endLine":129,"endColumn":19,"suggestions":"78"},{"ruleId":"64","severity":1,"message":"65","line":18,"column":5,"nodeType":"66","endLine":18,"endColumn":7,"suggestions":"79"},{"ruleId":"69","severity":1,"message":"80","line":1,"column":34,"nodeType":"71","messageId":"72","endLine":1,"endColumn":43},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.","ArrayExpression",["83"],["84"],"no-unused-vars","'chat' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'selectChat' and 'selectedChat'. Either include them or remove the dependency array.",["85"],["86"],"'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},{"desc":"87","fix":"89"},{"desc":"90","fix":"91"},{"desc":"87","fix":"92"},"Update the dependencies array to be: [props.history]",{"range":"93","text":"94"},{"range":"95","text":"94"},"Update the dependencies array to be: [chats.length, selectChat, selectedChat]",{"range":"96","text":"97"},{"range":"98","text":"94"},[472,474],"[props.history]",[1576,1578],[3577,3591],"[chats.length, selectChat, selectedChat]",[441,443]]