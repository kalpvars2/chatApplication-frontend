[{"/home/kalp/Desktop/WebD/My/Chat-App/client/src/index.js":"1","/home/kalp/Desktop/WebD/My/Chat-App/client/src/reportWebVitals.js":"2","/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/SignUp/SignUp.js":"3","/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/Dashboard/Dashboard.js":"4","/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/Login/Login.js":"5","/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/ChatList/ChatList.js":"6","/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/ChatView/ChatView.js":"7","/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/ChatTextBox/ChatTextBox.js":"8","/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/NewChat/NewChat.js":"9","/home/kalp/Desktop/WebD/My/Chat-App/client/src/App.js":"10"},{"size":952,"mtime":1611134464584,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1609243000250,"results":"13","hashOfConfig":"12"},{"size":3668,"mtime":1611141032126,"results":"14","hashOfConfig":"12"},{"size":8204,"mtime":1611325872497,"results":"15","hashOfConfig":"12"},{"size":2888,"mtime":1611140979204,"results":"16","hashOfConfig":"12"},{"size":2722,"mtime":1611328117347,"results":"17","hashOfConfig":"12"},{"size":1667,"mtime":1611307922066,"results":"18","hashOfConfig":"12"},{"size":1055,"mtime":1610040475451,"results":"19","hashOfConfig":"12"},{"size":3607,"mtime":1611328083639,"results":"20","hashOfConfig":"12"},{"size":578,"mtime":1611234203386,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"873m4w",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/kalp/Desktop/WebD/My/Chat-App/client/src/index.js",[],["46","47"],"/home/kalp/Desktop/WebD/My/Chat-App/client/src/reportWebVitals.js",[],"/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/SignUp/SignUp.js",["48"],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport './SignUp.css';\n\nconst SignUp = (props) => {\n\n\tconst [formData, setFormData] = useState({\n\t\temail: '',\n\t\tpassword: '',\n\t\tpasswordConfirmation: ''\n\t});\n\n\tconst [signUpError, setSignUpError] = useState('');\n\n\tuseEffect(() => {\n\t\tconst token = localStorage.getItem('chatAppToken');\n\t\tif(token)\n\t\t\tprops.history.push('/');\n\t}, []);\n\n\tconst isFormValid = () => formData.password === formData.passwordConfirmation;\n\n\tconst onSubmitSignUp = (event) => {\n\t\tevent.preventDefault();\n\t\tif(!isFormValid()){\n\t\t\tsetSignUpError('Passwords do not match. Try again!');\n\t\t\treturn;\n\t\t}\n\t\tfetch(\"http://localhost:8000/register\", {\n\t\t\tmethod: 'post',\n\t\t\theaders: {'Content-Type':'application/json'},\n\t\t\tbody: JSON.stringify({\n\t\t\t\temail: formData.email,\n\t\t\t\tpassword: formData.password\n\t\t\t})\n\t\t})\n\t\t.then(response => response.json())\n\t\t.then(data => {\n\t\t\tif(data.type === \"error\")\n\t\t\t\tsetSignUpError(data.value);\n\t\t\telse{\n\t\t\t\tsetSignUpError('');\n\t\t\t\tlocalStorage.setItem('chatAppToken', data.value);\n\t\t\t\tprops.history.push('/')\n\t\t\t}\n\t\t})\n\t\t.catch(err => setSignUpError(err))\n\t};\n\n\tconst onUserTyping = (type, event) => {\n\t\tswitch (type){\n\t\t\tcase 'email':\n\t\t\t\tsetFormData({...formData, email: event.target.value});\n\t\t\t\tbreak;\n\t\t\tcase 'password':\n\t\t\t\tsetFormData({...formData, password: event.target.value});\n\t\t\t\tbreak;\n\t\t\tcase 'passwordConfirmation':\n\t\t\t\tsetFormData({...formData, passwordConfirmation: event.target.value})\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log(formData.email);\n\t\t}\n\t};\n\t\n\treturn (\n\t\t<article className=\"ba b--black-10 mv4\n\t\t w-50-m w-25-l mw6 shadow-5 center\">\n\t\t\t<main className=\"pa4 black-80\">\n\t\t\t  <div className=\"measure\">\n\t\t\t    <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\n\t\t\t      <legend className=\"f1 fw6 ph0 mh0\">Register</legend>\n\t\t\t      <div className=\"mt3\">\n\t\t\t        <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\n\t\t\t        <input required onChange={(event) => onUserTyping('email', event)} className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"email\" name=\"email-address\"  id=\"email-address\" />\n\t\t\t      </div>\n\t\t\t      <div className=\"mv3\">\n\t\t\t        <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\n\t\t\t        <input required onChange={(event) => onUserTyping('password', event)} className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"password\"  id=\"password\" />\n\t\t\t      </div>\n\t\t\t      <div className=\"mv3\">\n\t\t\t        <label className=\"db fw6 lh-copy f6\" htmlFor=\"passwordConfirmation\">Confirm Password</label>\n\t\t\t        <input required onChange={(event) => onUserTyping('passwordConfirmation', event)} className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"passwordConfirmation\"  id=\"passwordConfirmation\" />\n\t\t\t      </div>\n\t\t\t    </fieldset>\n\t\t\t    <div style={{textAlign: 'center'}}>\n\t\t\t      <input onClick={(event) => onSubmitSignUp(event)} className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" type=\"submit\" value=\"Sign Up\" />\n\t\t\t    </div>\n\t\t\t    {\n\t\t\t    \tsignUpError \n\t\t\t    \t? <div><h5 className=\"error\">{signUpError}</h5></div>\n\t\t\t    \t: null\n\t\t\t    }\n\t\t\t    <div style={{textAlign: \"center\", marginTop: '10px'}}>\n\t\t\t\t    <h5>Already have an account?</h5>\n\t\t\t\t    <Link to=\"/login\" style={{textDecoration: \"none\", color: \"black\"}} className=\"b ph1 pv1 input-reset ba b--black bg-transparent grow pointer f6 dib\">Sign In Instead</Link>\n\t\t\t\t</div>\n\t\t\t  </div>\n\t\t\t</main>\n\t\t</article>\n\t);\n}\n\nexport default SignUp;\n","/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/Dashboard/Dashboard.js",["49","50","51","52"],"/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/Login/Login.js",["53"],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport './Login.css';\n\nconst Login = (props) => {\n\tconst [formData, setFormData] = useState({\n\t\temail: '',\n\t\tpassword: ''\n\t});\n\n\tconst [signInError, setSignInError] = useState('');\n\n\tuseEffect(() => {\n\t\tconst token = localStorage.getItem('chatAppToken');\n\t\tif(token)\n\t\t\tprops.history.push('/');\n\t}, []);\n\n\tconst onSubmitSignIn = (event) => {\n\t\tevent.preventDefault();\n\t\tfetch(\"http://localhost:8000/login\", {\n\t\t\tmethod: 'post',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\temail: formData.email,\n\t\t\t\tpassword: formData.password\n\t\t\t})\n\t\t})\n\t\t.then(response => response.json())\n\t\t.then(data => {\n\t\t\tif(data.type === 'error')\n\t\t\t\tsetSignInError(data.value)\n\t\t\telse{\n\t\t\t\tsetSignInError('');\n\t\t\t\tlocalStorage.setItem('chatAppToken', data.value);\n\t\t\t\tprops.history.push('/');\n\t\t\t}\n\t\t})\n\t};\n\n\tconst onUserTyping = (type, event) => {\n\t\tswitch (type){\n\t\t\tcase 'email':\n\t\t\t\tsetFormData({...formData, email: event.target.value});\n\t\t\t\tbreak;\n\t\t\tcase 'password':\n\t\t\t\tsetFormData({...formData, password: event.target.value});\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t};\n\treturn (\n\t\t<article className=\"ba b--black-10 mv4  w-50-m w-25-l mw6 shadow-5 center\">\n\t\t\t<main className=\"pa4 black-80\">\n\t\t\t  <div className=\"measure\">\n\t\t\t    <fieldset id=\"sign_in\" className=\"ba b--transparent ph0 mh0\">\n\t\t\t      <legend className=\"f1 fw6 ph0 mh0\">Sign In</legend>\n\t\t\t      <div className=\"mt3\">\n\t\t\t        <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\n\t\t\t        <input required onChange={(event) => onUserTyping('email', event)} className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"email\" name=\"email-address\"  id=\"email-address\" />\n\t\t\t      </div>\n\t\t\t      <div className=\"mv3\">\n\t\t\t        <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\n\t\t\t        <input required onChange={(event) => onUserTyping('password', event)} className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"password\"  id=\"password\" />\n\t\t\t      </div>\n\t\t\t    </fieldset>\n\t\t\t    <div style={{textAlign: 'center'}}>\n\t\t\t      <input onClick={(event) => onSubmitSignIn(event)} className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" type=\"submit\" value=\"Sign In\" />\n\t\t\t    </div>\n\t\t\t    {\n\t\t\t    \tsignInError \n\t\t\t    \t? <div><h5 className=\"error\">{signInError}</h5></div>\n\t\t\t    \t: null\n\t\t\t    }\n\t\t\t    <div style={{textAlign: \"center\", marginTop: '10px'}}>\n\t\t\t\t    <h5>Don't have an account?</h5>\n\t\t\t\t    <Link to=\"/signup\" style={{textDecoration: \"none\", color: \"black\"}} className=\"b ph1 pv1 input-reset ba b--black bg-transparent grow pointer f6 dib\">Sign Up Instead</Link>\n\t\t\t\t</div>\n\t\t\t  </div>\n\t\t\t</main>\n\t\t</article>\n\t);\n}\n\nexport default Login;\n","/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/ChatList/ChatList.js",[],"/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/ChatView/ChatView.js",[],"/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/ChatTextBox/ChatTextBox.js",["54"],"import React, {useState, useRef, useContext} from 'react';\nimport {ReactComponent as SendMessageSVG} from '../../assets/svg/sendMessage.svg';\nimport {submitMessageContext, messageReadContext} from '../Dashboard/Dashboard';\nimport './ChatTextBox.css';\n\nconst ChatTextBox = () => {\n\tconst [chatText, setChatText] = useState('');\n\tconst chatRef = useRef();\n\tconst submitMessage = useContext(submitMessageContext);\n\tconst messageRead = useContext(messageReadContext);\n\tconst onUserTyping = (event) => {\n\t\t(event.keyCode === 13) ? submitMessage(chatRef.current.value) : setChatText(event.target.value);\n\t};\n\n\tconst userClickedInput = () => messageRead();\n\n\treturn (\n\t\t<div className=\"chatInput\">\n\t\t\t<input ref={chatRef} required onFocus={userClickedInput} onKeyUp={(event) => onUserTyping(event)} className=\"pa2 br4 input-reset ba bg-transparent w-100\" id=\"chatTextInput\" placeholder=\"Enter message...\"/>\n\t\t\t<SendMessageSVG onClick={() => submitMessage(chatRef.current.value)} className=\"pointer grow sendMessage\" />\n\t\t</div>\n\t);\n}\n\nexport default ChatTextBox;","/home/kalp/Desktop/WebD/My/Chat-App/client/src/components/NewChat/NewChat.js",["55","56"],"/home/kalp/Desktop/WebD/My/Chat-App/client/src/App.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":19,"column":5,"nodeType":"63","endLine":19,"endColumn":7,"suggestions":"64"},{"ruleId":"65","severity":1,"message":"66","line":10,"column":7,"nodeType":"67","messageId":"68","endLine":10,"endColumn":15},{"ruleId":"61","severity":1,"message":"62","line":51,"column":5,"nodeType":"63","endLine":51,"endColumn":7,"suggestions":"69"},{"ruleId":"70","severity":1,"message":"71","line":129,"column":30,"nodeType":"72","messageId":"73","endLine":129,"endColumn":32},{"ruleId":"61","severity":1,"message":"74","line":143,"column":5,"nodeType":"63","endLine":143,"endColumn":19,"suggestions":"75"},{"ruleId":"61","severity":1,"message":"62","line":17,"column":5,"nodeType":"63","endLine":17,"endColumn":7,"suggestions":"76"},{"ruleId":"65","severity":1,"message":"77","line":7,"column":9,"nodeType":"67","messageId":"68","endLine":7,"endColumn":17},{"ruleId":"65","severity":1,"message":"78","line":1,"column":34,"nodeType":"67","messageId":"68","endLine":1,"endColumn":43},{"ruleId":"65","severity":1,"message":"66","line":3,"column":7,"nodeType":"67","messageId":"68","endLine":3,"endColumn":15},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.","ArrayExpression",["81"],"no-unused-vars","'firebase' is assigned a value but never used.","Identifier","unusedVar",["82"],"array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'selectChat' and 'selectedChat'. Either include them or remove the dependency array.",["83"],["84"],"'chatText' is assigned a value but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"85","fix":"86"},{"desc":"85","fix":"87"},{"desc":"88","fix":"89"},{"desc":"85","fix":"90"},"Update the dependencies array to be: [props.history]",{"range":"91","text":"92"},{"range":"93","text":"92"},"Update the dependencies array to be: [chats.length, selectChat, selectedChat]",{"range":"94","text":"95"},{"range":"96","text":"92"},[423,425],"[props.history]",[1587,1589],[4046,4060],"[chats.length, selectChat, selectedChat]",[392,394]]